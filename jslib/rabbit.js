// Generated by CoffeeScript 1.6.3
(function() {
  var amqp, async, c, connection, exchange, extend, queue, shared,
    _this = this;

  c = require('node-config');

  amqp = require('amqp');

  extend = require('extend');

  async = require('async');

  shared = require('./shared');

  /*
  Assumptions
    1 rabbit connection
    1+ queue
    1+ exchange
  
  Example
    rabbit
      host:
      port:
      queues: [
        name:
        exchange: 
        opts:
      ]
      exchanges: [
        name:
        opts:
      ]
  */


  connection = {
    newConnection: function(cb) {
      var conn, missing;
      missing = shared.missingParameters(["host", "port"], c.rabbit);
      if (missing) {
        return cb(new Error(missing));
      }
      conn = amqp.createConnection({
        host: c.rabbit.host,
        port: parseInt(c.rabbit.port)
      });
      conn.on("ready", function() {
        _this.app.rabbit.conn = conn;
        return typeof cb === "function" ? cb() : void 0;
      });
      return conn.on("error", function(err) {
        if (err) {
          return typeof cb === "function" ? cb(err) : void 0;
        }
      });
    },
    setUp: function(cb) {
      var conn, key, _base;
      conn = ((function() {
        var _i, _len, _ref, _results;
        _ref = ["conn", "connection"];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          if (c.rabbit[key] != null) {
            _results.push(c.rabbit[key]);
          }
        }
        return _results;
      })())[0];
      if (conn == null) {
        return connection.newConnection(cb);
      } else {
        if ((_base = _this.app).rabbit == null) {
          _base.rabbit = {};
        }
        _this.app.rabbit.conn = conn;
        return typeof cb === "function" ? cb() : void 0;
      }
    },
    tearDown: function(cb) {
      if (_this.app.rabbit.conn == null) {
        return typeof cb === "function" ? cb() : void 0;
      }
      _this.app.rabbit.conn.disconnect();
      delete _this.app.rabbit.conn;
      return typeof cb === "function" ? cb() : void 0;
    }
  };

  exchange = {
    setUp: function(cb) {
      return typeof cb === "function" ? cb() : void 0;
    },
    tearDown: function(cb) {
      return typeof cb === "function" ? cb() : void 0;
    }
  };

  queue = {
    setUp: function(cb) {
      return typeof cb === "function" ? cb() : void 0;
    },
    tearDown: function(cb) {
      return typeof cb === "function" ? cb() : void 0;
    }
  };

  exports.setUp = function(app, cb) {
    _this.app = app;
    if (c.rabbit == null) {
      return typeof cb === "function" ? cb(null, _this.app) : void 0;
    }
    return async.waterfall([connection.setUp, exchange.setUp, queue.setUp], function(err) {
      if (err) {
        cb(err);
      }
      return typeof cb === "function" ? cb() : void 0;
    });
  };

  exports.tearDown = function(app, cb) {
    _this.app = app;
    return async.waterfall([connection.tearDown, exchange.tearDown, queue.tearDown], function(err) {
      if (err) {
        cb(err);
      }
      return typeof cb === "function" ? cb() : void 0;
    });
  };

}).call(this);
