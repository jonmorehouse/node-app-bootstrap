// Generated by CoffeeScript 1.7.1
var App, async, events,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

async = require('async');

events = require('events');

App = (function(_super) {
  __extends(App, _super);

  App.components = {
    rabbit: require("./rabbit"),
    postgresql: require("./postgres"),
    loggly: require("./loggly"),
    redis: require("./redis"),
    zerorpc: require("./zerorpc")
  };

  function App(cb) {
    this._caller = __bind(this._caller, this);
    App.__super__.constructor.apply(this, arguments);
    this._caller("setUp", (function(_this) {
      return function(err, app) {
        return cb(err, app);
      };
    })(this));
  }

  App.prototype.close = function(cb) {
    if (this.listeners("close").length > 0) {
      return this.emit("close", (function(_this) {
        return function() {
          return _this._caller("tearDown", cb);
        };
      })(this));
    } else {
      return this._caller("tearDown", cb);
    }
  };

  App.prototype._caller = function(method, cb) {
    var component, functions, key;
    functions = (function() {
      var _ref, _results;
      _ref = App.components;
      _results = [];
      for (key in _ref) {
        component = _ref[key];
        _results.push(component[method]);
      }
      return _results;
    })();
    return async.each(functions, ((function(_this) {
      return function(method, cb) {
        return method(_this, cb);
      };
    })(this)), (function(_this) {
      return function(err) {
        if (err) {
          return cb(err);
        }
        return typeof cb === "function" ? cb(null, _this) : void 0;
      };
    })(this));
  };

  return App;

})(events.EventEmitter);

module.exports = App;
